@inject ExpedienteBLL expedienteLL
<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>

<MudDialog>
    <DialogContent >

            <MudTable Items="@Expedientes"  FixedHeader="@true" FixedFooter="@true" Height="500px" Hover="@true"  Striped="@true" Filter="new Func<Expediente,bool>(FilterFunc1)" @ref="mudTable" RowClassFunc="@SelectedRowClassFunc" @bind-SelectedItem="selectedItem1" T="Expediente">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Pacientes</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Nombres</MudTh>
                <MudTh>Apellidos</MudTh>
                <MudTh>Expediente</MudTh>
                <MudTh>Cédula</MudTh>
                <MudTh>Fecha Nacimiento</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nombres">@context.Nombre</MudTd>
                <MudTd DataLabel="Apellidos">@context.Apellido</MudTd>
                <MudTd DataLabel="Expediente">@context.NumeroExpendiente</MudTd>
                <MudTd DataLabel="Cédula">@context.Cedula</MudTd>
                <MudTd DataLabel="Fecha Nacimiento">@context.FechaNacimiento.ToString("dd/MM/yyyy")</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private int selectedRowNumber = -1;
    private MudTable<Expediente> mudTable;
    private Expediente selectedItem1 = null;
    private string searchString1 = "";
    private HashSet<Expediente> selectedItems = new HashSet<Expediente>();

    private IEnumerable<Expediente> Expedientes = new List<Expediente>();

    protected override async Task OnInitializedAsync()
    {
        Expedientes = await expedienteLL.GetAll();
    }


    private string SelectedRowClassFunc(Expediente element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;

            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;

            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private bool FilterFunc1(Expediente element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Expediente element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Nombre.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Apellido.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Cedula.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.NumeroExpendiente.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
         if (element.FechaNacimiento.ToString("dd/MM/yyyy").Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(mudTable.SelectedItem));
    void Cancel() => MudDialog.Cancel();
}