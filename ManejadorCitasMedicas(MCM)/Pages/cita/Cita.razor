@page "/cita"
@page "/cita/{CitaId:int}"

@inject CitaBLL citaBLL
@inject PacienteBLL expdienteBLL
@inject MedicoBLL medicoBLL

@inject IDialogService DialogService
@inject ISnackbar toast

<EditForm Model="CitaModel" OnValidSubmit="Guardar">
    <div class="row mt-2">
        <DataAnnotationsValidator />
        @*Datos del paciente*@
        <div class="col-sm-6 card">
            <div class="card-header">
                <h2>Paciente</h2>
            </div>

            <div class="card-body">
                <label class="form-label">Nombre</label>
                <div class="input-group">
                    <input @bind="exp.Nombre" readonly type="text" class="form-control" />
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary input-group-text ml-2" @onclick="OpenDialogExpediente">
                            Selecionar
                        </button>
                    </div>
                </div>
                 <ValidationMessage For="@(() => CitaModel.PacienteId)" />

                <label class="form-label mt-2">Apellido</label>
                <input @bind="exp.PrimerApellido" type="text" readonly class="form-control" />

                <label class="form-label mt-2">Expediente</label>
                <input @bind="exp.NumeroExpendiente" type="text" readonly class="form-control" />

                <label class="form-label mt-2">Cédula</label>
                <input @bind="exp.Cedula" type="text" readonly class="form-control" />

                <label class="form-label mt-2">Fecha Nacimiento</label>
                <input @bind="exp.FechaNacimiento" type="date" readonly class="form-control" />
            </div>

        </div>

        @*Datos del medico*@
        <div class="col-sm-6 card pl-1">
            <div class="card-header">
                <h2>Médico</h2>
            </div>
            <div class="card-body">
                <label class="form-label">Nombres</label>
                <div class="input-group">
                    <input @bind="m.Nombres" type="text" readonly class="form-control" />
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary input-group-text ml-2" @onclick="OpenDialogMedico">
                            Selecionar
                        </button>
                    </div>
                </div>
                <ValidationMessage For="@(() => CitaModel.MedicoId)" />
                <label class="form-label mt-2">Apellidos</label>
                <input @bind="m.Apellidos" type="text" readonly class="form-control" />

                <label class="form-label mt-2">Especialidad</label>
                <input @bind="m.NombreEspecialidad" type="text" readonly class="form-control" />

                <label class="form-label mt-2">Oficio</label>
                <input @bind="m.Oficio" type="text" readonly class="form-control" />

                <label class="form-label mt-2">Cédula</label>
                <input @bind="m.Cedula" type="text" readonly class="form-control" />
            </div>

        </div>
    </div>

    <div class="row">
        <div class="col-sm-6">
            <label class="form-label mt-2">Fecha Inicio</label>
            <input @bind="CitaModel.Inicia" type="date" class="form-control"/>

            <label class="form-label mt-2">Descripción</label>
            <textarea @bind="CitaModel.Descripcion" type="text" class="form-control" />

             <button  class="btn btn-success mt-2 w-100">Guardar</button>
        </div>

        <div class="col-sm-6">

        </div>
    </div>

</EditForm>

@code {
    [Parameter]
    public int CitaId { get; set; }
    public Models.Citas CitaModel;
    public Medicos m = new Medicos();
    public Pacientes exp = new Pacientes();

    protected override async Task OnInitializedAsync()
    {
        CitaModel = new Models.Citas();

        if (CitaId != 0)
        {
            CitaModel = await citaBLL.Get(CitaId);
            exp = await expdienteBLL.Get(CitaModel.PacienteId);
            m = await medicoBLL.Get(CitaModel.MedicoId);
        }
    }

    private async Task OpenDialogMedico()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, FullScreen = true };
        var dialog = DialogService.Show<MedicosModal>("", options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            m = (Medicos)result.Data;

            CitaModel.MedicoId = m.MedicoId;
        }
    }

    private async Task OpenDialogExpediente()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, FullScreen = true };
        var dialog = DialogService.Show<ExpedienteModal>("", options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            exp = (Pacientes)result.Data;

            CitaModel.PacienteId = exp.PacienteId;
        }
    }

    private async Task Guardar()
    {
        if (await citaBLL.Save(CitaModel))
        {
            toast.Add("Guardado", Severity.Success);
            Limpiar();
        }
        else
        {
            toast.Add("Error, no se logro guardar la cita.", Severity.Error);
        }

    }

    private void Limpiar()
    {
        CitaModel = new();
        m = new();
        exp = new();
    }
}
