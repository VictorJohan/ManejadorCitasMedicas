@page "/medico"
@page "/medico/{MedicoId:int}"
@inject MedicoBLL medicoBLL
@inject EspecialidadBLL especialidadesBLL
@inject ISnackbar toast
@inject Tools tool
@inject ResponseDialog rd
@attribute [Authorize(Roles = "Usuario")]

<EditForm Model="MedicoModel" OnValidSubmit="Guardar">
    <DataAnnotationsValidator/>

    <div class="card mt-2">
        <div class="card-header">
           <h2>Datos del Médico</h2>
        </div>
          <div class="card-body">
              @*Nombre y Apellido*@
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                     <label>Nombres</label>
                     <input @bind="MedicoModel.Nombres" class="form-control" />
                     <ValidationMessage For="(() => MedicoModel.Nombres)" />
                </div>
            </div>
            <div class="col-sm-6">
                 <div class="form-group">
                     <label>Apellidos</label>
                     <input @bind="MedicoModel.Apellidos" class="form-control" />
                     <ValidationMessage For="(() => MedicoModel.Apellidos)" />
                </div>
            </div>
        </div>

        @*Cedula*@

                <div class="form-group">
                     <label>Cédula</label>
                     <input @bind="MedicoModel.Cedula" class="form-control" />
                     <ValidationMessage For="(() => MedicoModel.Cedula)" />
                </div>

        @*Oficio*@

                 <div class="form-group">
                     <label>Oficio</label>
                     <input @bind="MedicoModel.Oficio" class="form-control" />
                     <ValidationMessage For="(() => MedicoModel.Oficio)" />
                </div>

        @*Especialidad*@

                 <div class="form-group">
                     <label>Especialidad</label>
                     <select @bind="MedicoModel.EspecialidadId" class="form-control">
                         <option value="0">Seleccionna una especialidad</option>
                    @foreach (var item in Especialidades)
                    {
                            <option value="@item.EspecialidadId">@item.Nombre</option>
                    }
                     </select>
                     <ValidationMessage For="(() => MedicoModel.Contrasena)" />
                </div>

            @*Email*@

                 <div class="form-group">
                     <label>Email</label>
                     <input @bind="MedicoModel.Email" class="form-control" />
                     <ValidationMessage For="(() => MedicoModel.Email)" />
                </div>

            @*Contrasena*@

                 <div class="form-group">
                     <label>Contraseña</label>
                     <input type="password" @bind="MedicoModel.Contrasena" class="form-control" />
                     <ValidationMessage For="(() => MedicoModel.Contrasena)" />
                </div>

            @*Telefono*@
                 <div class="form-group">
                     <label>Teléfono</label>
                     <input @bind="MedicoModel.Telefono" class="form-control" />
                     <ValidationMessage For="(() => MedicoModel.Telefono)" />
                </div>
          </div>
          <div class="card-footer">
              <div class="d-flex">
                  <button class="btn btn-success">Gaurdar</button>
                  <button type="button" @onclick="Limpiar" class="btn btn-primary ml-2">Nuevo</button>
                  <button type="button" @onclick="Eliminar" class="btn btn-danger ml-2">Elimminar</button>
              </div>
          </div>
    </div>

</EditForm>

@code {
    [Parameter]
    public int MedicoId { get; set; }

    Models.Medicos MedicoModel;
    List<Models.Especialidades> Especialidades = new();

    protected override async Task OnInitializedAsync()
    {
        tool.AppBarTitulo = "Médico";
        MedicoModel = new();
        Especialidades = await especialidadesBLL.GetAll();

        if (MedicoId > 0)
        {
            MedicoModel = await medicoBLL.Get(MedicoId);
        }
    }

    public async Task Guardar()
    {
        if (await medicoBLL.Save(MedicoModel))
        {
            toast.Add("Médico Guardado", Severity.Success);
            Limpiar();
        }
        else
        {
            toast.Add("Error, no se logró guardar el médico", Severity.Error);
        }
    }

    public async Task Eliminar()
    {
        if (await rd.ShowQuestion("¿Seguro que deseas eliminar este registro?"))
        {
            if (await medicoBLL.Delete(MedicoId))
            {
                toast.Add("Médico Eliminado", Severity.Success);
                Limpiar();
            }
            else
            {
                toast.Add("No se logró eliminar el médico", Severity.Error);
            }
        }


    }

    public void Limpiar()
    {
        MedicoModel = new();
    }
}