@inherits LayoutComponentBase
@inject AuthenticationStateProvider Auth
@inject NavigationManager nav 
@inject ProtectedSessionStorage localStorage
@inject MedicoBLL medicoBLL
@inject UsuarioBLL usuarioBLL
@inject Tools tool
<AuthorizeView>
    <Authorized >
        <MudThemeProvider/>
        <MudDialogProvider/>
        <MudSnackbarProvider/>
        <div class="page">

            <MudLayout>
            <MudAppBar  Elevation="1" Style="background-color: #51a2ee">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
                <h3>@tool.AppBarTitulo</h3>
                <MudSpacer />
                    @if(usuarioBLL.Usuario != null)
                    {
                        <label>@usuarioBLL.Usuario.Nombre @usuarioBLL.Usuario.Apellido</label>
                    }
                    else
                    {
                         <label>@medicoBLL.Medico.Nombres @medicoBLL.Medico.Apellidos</label>
                    }
                    <MudMenu Icon="@Icons.Material.Filled.Person" Color="Color.Inherit">
                  <div class="mr-5">
                      @* <MudMenuItem>Perfil</MudMenuItem>*@
                       <MudMenuItem OnClick="@Salir">Salir</MudMenuItem>
                  </div>
               </MudMenu>
            </MudAppBar>
            <MudDrawer @bind-Open="@open" Style="background: rgb(255,255,255);
background: linear-gradient(183deg, rgba(255,255,255,1) 69%, rgba(81,162,238,1) 100%);" Elevation="1">
                <MudDrawerHeader>
                    <MudText Typo="Typo.h6">MCM</MudText>
                </MudDrawerHeader>
                <MudDivider></MudDivider>
                <MudNavMenu>
                    <AuthorizeView Context="usuario" Roles="Usuario">
                        <MudNavLink Icon="@Icons.Filled.Home" OnClick="@(() => NavigateTo("/inicio"))">
                            Inicio
                        </MudNavLink>
                        <MudNavLink Icon="@Icons.Filled.CalendarMonth" OnClick="@(() => NavigateTo("/citas"))">
                            Citas
                        </MudNavLink>
                        <MudNavLink Icon="@Icons.Filled.Person" OnClick="@(() => NavigateTo("/pacientes"))">
                            Pacientes
                        </MudNavLink>
                        <MudNavLink Icon="@Icons.Filled.HealthAndSafety" OnClick="@(() => NavigateTo("/medicos"))">
                            Medicos
                        </MudNavLink>
                    </AuthorizeView>
                    <AuthorizeView Context="medico" Roles="Medico">
                         <MudNavLink Icon="@Icons.Filled.Home" OnClick="@(() => NavigateTo("/inicio"))">
                            Inicio
                        </MudNavLink>
                        <MudNavLink Icon="@Icons.Filled.List" OnClick="@(() => NavigateTo("/misCitas"))">Mis Citas</MudNavLink>
                    </AuthorizeView>
                </MudNavMenu>
            </MudDrawer>
            <MudMainContent Class="pt-16 pl-5 pr-5 pb-2">
                    @Body
            </MudMainContent>
        </MudLayout>

        </div>
    </Authorized>
    <NotAuthorized>
       <UnAuthorize></UnAuthorize>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }



    override protected async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            await RestaurarSesiones();
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

        }
    }

    bool open = false;

    void ToggleDrawer()
    {
        open = !open;
    }

    async Task Salir()
    {
        nav.NavigateTo("/");
        await EliminarSesiones();
        ((CustomAuth)Auth).Salir();

        usuarioBLL.Usuario = null;
        medicoBLL.Medico = null;
    }

    void NavigateTo(string url)
    {

        open = !open;
        nav.NavigateTo(url);
    }

    public async Task RestaurarSesiones()
    {
        var usuario = await localStorage.GetAsync<Usuarios>("usuario");
        var res = usuario.Success ? usuario.Value : null;
        if (res != null)
        {
            usuarioBLL.Usuario = res;
            ((CustomAuth)Auth).IniciarUsuario(usuarioBLL.Usuario);
        }

        var medico = await localStorage.GetAsync<Medicos>("medico");
        var res2 = medico.Success ? medico.Value : null;
        if (res2 != null)
        {
            medicoBLL.Medico = res2;
            ((CustomAuth)Auth).IniciarMedico(medicoBLL.Medico);
        }
    }

    public async Task EliminarSesiones()
    {
        await localStorage.DeleteAsync("medico");
        await localStorage.DeleteAsync("usuario");
    }
}
